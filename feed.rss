<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Каморка сурового программиста, дубль 2</title><description>Блог о технологиях, преимущественно о Swift и обо всём, что связано с Apple</description><link>https://sparklone.github.io</link><language>ru</language><lastBuildDate>Sun, 12 Jul 2020 01:35:26 +0300</lastBuildDate><pubDate>Sun, 12 Jul 2020 01:35:26 +0300</pubDate><ttl>250</ttl><atom:link href="https://sparklone.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://sparklone.github.io/articles/create-blog-using-swift-and-publish-and-deploy-to-github-pages</guid><title>Создаем блог на Swift с помощью Publish с размещением на GitHub Pages</title><description>Создаем блог на Swift с помощью Publish на GitHub Pages</description><link>https://sparklone.github.io/articles/create-blog-using-swift-and-publish-and-deploy-to-github-pages</link><pubDate>Wed, 1 Jul 2020 19:23:00 +0300</pubDate><content:encoded><![CDATA[<h1>Создаем блог на Swift с помощью Publish с размещением на GitHub Pages</h1><p>У меня уже есть блог, он на WordPress и я устал от всей этой свистопляски с обновлением версии, плагинов, возможности взлома и прочего. Это буквально убивает желание продолжать его развивать. Моя цель - делиться с миром своими мыслями и находками, но при этом иметь полный контроль над своим сайтом. С недавних пор Github Pages предоставила возможность хранить простенькие сайты у них. Никаких баз данных и PHP, статический сайт, как в старые добрые. Для блога - идеально. А т.к. процесс деплоя будет проходить через GitHub - будет прозрачная история всех изменений, и полный контроль над тем, что реально находится на сайте, трояны и прочая нечисть не пройдут.</p><p>Но они предлагают использовать Jekyll, статический генератор сайтов написанный на Ruby. Все же хочется отачивать мастерство в том языке, который ты используешь ежедневно, поэтому в качестве альтернативы я взял свежий статический генератор написанный на Swift от John Sundell.</p><p>Нам предстоит сделать 3 вещи:</p><ol><li><a href="#create-blog">создать блог на GitРub Pages</a></li><li><a href="#publish">разобраться с тем как работать с Publish</a></li><li><a href="#deploy">залить свой новый блог на GitРub Pages</a> <br/><br/> Итак, перейдем к пункту 1</li></ol><h2><a name="create-blog"></a> 1. Создадим блог на Github Pages.</h2><p>Официальная инструкция доступен по адресу <a href="https://pages.github.com">https://pages.github.com</a></p><p>Основное условие - login блога должен совпадать с вашим логином на GitHub. В моем случае это sparklone</p><ul><li>логинимся в GitHub</li><li>идем по адресу <a href="https://github.com/new">https://github.com/new</a></li><li>в качестве имени репозитория вводите <em>login</em>.github.io, в моем случае было sparklone.github.io</li><li>убеждаемся, что он будет Public</li><li>жмем Create Repository</li><li>все, наш блог уже доступен по адресу https://<em>login</em>.github.io</li></ul><br/><p>Но пока на сайте нет ни одного файл</p><p>Если есть желание - можно попробовать вообще все залить руками (в конце концов это обычный репозиторий) Дальнейшие шаги не обязательны, коль контент будет заливаться самим Publish. Хотя с другой стороны это будет локальная копия сайта, так что делать это или нет - решать вам.</p><h3>Получение локальной копии</h3><br/><ul><li>сначала забираем репозиторий к себе, я предпочитаю делать это из консоли</li></ul><br/><pre><code>git clone https://github.<span class="property">com</span><span class="comment">/*login*/*login*.github.io</span>
</code></pre><ul><li>Чтобы проверить что все работает - создадим корневой файл index.html можно руками положить в корень папки <em>login</em>.github.io файл index.html, можно из консоли <br/><br/></li></ul><pre><code>cd *login*.github.<span class="property">io</span>
echo <span class="string">"Site Under Construction"</span> &gt; index.<span class="property">html</span>
</code></pre><ul><li>теперь надо залить все это дело на сайт <br/><br/></li></ul><pre><code>git add --all
git commit -m <span class="string">"Initial commit"</span>
git push -u origin master
</code></pre><ul><li>идем по адресу https://<em>login</em>.github.io и видим строку Site Under Construction.</li></ul><p>Можно переходить ко второму пункту</p><h2><a name="publish"></a> 2. Разберёмся с тем как работать с Publish</h2><p>Еще раз <a href="https://github.com/JohnSundell/Publish">Publish</a> - это статический генератор сайтов написанный на Swift, что позволяет выстраивать любую логику при генерации сайта, теги, карта сайта, rss, специфическая перелинковка. Все на что на хватит фантазии. Одна из моих идей на будущее - попробовать писать статьи на двух языках, и чтобы настроенный шаблон умел это понимать и вставлять переключатель в статью к примеру. Не знаю дойдут ли когда нибудь до этого руки, но как идея - интересно.</p><p>Я предпочел установить напрямую через git, создал папку ~/Developer/tools и там выполнил</p><pre><code>git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
cd <span class="type">Publish</span>
make
</code></pre><p>далее я создал папку где я планирую хранить свой сайт (точнее исходники его генератора), в моем случае это ~/Developer/my/blog</p><p>и внутри этой папки запускаем команду</p><pre><code>publish new
</code></pre><p>Это создаст новый сайт, список опций для команды можно узнать просто запустив в консоли publish</p><p><em>publish run</em> скомпилирует все исходники и запустит веб сервер на питоне (если прервать посредством Ctrl+C - веб сервер не умрет, и придется в процессах ковыряться чтобы убить Python)</p><p>Первая сборка занимает какое то время (подливаются нужные репозитории, компилируется все), при последующих запусках <em>publish run</em> - все происходит намного быстрее.</p><p>Открываем в браузере http://localhost:8000 и видим что получился за сайт</p><img src="https://sparklone.github.io/blog/images/create-blog-using-swift-and-publish-and-deploy-to-github-pages/blog-initial.png" width="600"/><p>Не густо, но мы еще ничего собственно и не сделали, чтобы ожидать чего то большего.</p><p>Настройку стилей и прочие моменты я оставлю на потом. На сегодня вижу перед собой следующие задачи</p><ol><li>сделать изначальную настройку генератора для нашего сайта</li><li>поменять пути по которым будут лежать записи и настроить меню</li><li>добавить подсветку для исходных файлов и создание своей темы <br/><br/></li></ol><h3>1. Изначальная настройка генератора для нашего сайта</h3><br/><p>Посмотрим что нам сгенерировал Publish. Внутри папки будет файл Package.swift, его открываем XCode'ом (можно в консоли набрать open Package.swift), и это запускает процесс подтягивания всех нужных библиотек. На скрине видно что должно получится в итоге.</p><img src="https://sparklone.github.io/blog/images/create-blog-using-swift-and-publish-and-deploy-to-github-pages/publish-initial-screen.png" width="600"/><p>Тестовая запись лежит в Content/posts/first-post.md Проверим, что мы можем что то изменить и это отразится на сайте Подправим текст в first-post.md (можно поменять дату, теги, описания, и сам контент)</p><p>В Xcode выбираем Mac в качества таргета для которого надо запускать и делаем Run проекту.</p><img src="https://sparklone.github.io/blog/images/create-blog-using-swift-and-publish-and-deploy-to-github-pages/blog-how-to-run.png" width="600"/><p>После этого рефрешим веб страницу <a href="http://localhost:8000">http://localhost:8000</a></p><h4>2. Меняем пути по которым будут лежать записи и настраиваем меню</h4><p>Почему это важно сделать сразу? Если вы решите поменять пути после того как уже зальете часть постов - входящие ссылки на эти страницы станут невалидными, а т.к. это не свой сервер/VPS - будет довольно проблематично сделать редирект со старых ссылок на новые пути. Не невозможно (вот к примеру плагин для <a href="https://github.com/jekyll/jekyll-redirect-from">Jekyll</a>), но зачем создавать себе головную боль в будущем если можно ее избежать.</p><p>По умолчанию все записи лежать в папке posts. Учитывая что в дальнейшем хочется бить на категории, а posts - общее название, - лучше переименовать папку в articles. Так же не помешает добавить страницу about</p><p>Но наш генератор пока ничего не знает про это.</p><p>В main.swift поменяем на</p><pre><code><span class="keyword">struct</span> Blog: <span class="type">Website</span> {
    <span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
        <span class="keyword">case</span> articles
        <span class="keyword">case</span> about
    }
}
</code></pre><p>Добавим файл <em>about.md</em> в папку <em>Content</em> и заполним немного информации о себе</p><p>К слову эту статью я пишу в XCode, редактируя md файл, и периодически запуская проект, чтобы посмотреть в браузере как это смотрится.</p><p>Я долго колебался заморачиваться ли с датой у файлов *.md, ну т.е. называть не my-article.md, а к примеру 2020-07-10-my-article.md. И все же решил отказаться от этой идеи. Т.к. в самих md файлах есть метаданные (поле date), это при желании позволит в будущем добавлять дату автоматически. И не придется следить за корректностью даты в имени файла, к тому же это убережет от расхождений, если в имени файла одна дата, а в метаданных внутри - другая. Недостатком такого решения я вижу то, что гипотетически могут в будущем быть коллизии в именах md файлов, но все таки это маловероятно, к тому же мы об этом узнаем при создании поста, а не сохранении.</p><h4>3. Добавляем подсветку для исходных файлов</h4><p>Автором генератора Publish так же была написана библиотека <a href="https://github.com/JohnSundell/Splash">Splash</a> позволяющая делать подсветку исходных кодов. Подключается она как package в Swift Package Manager</p><p>Открываем файл Package.swift и добавляем поддержку, по сути нужно добавить 2 строки Вот что получилось у меня</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"Blog"</span>,
    products: [
        .<span class="call">executable</span>(
            name: <span class="string">"Blog"</span>,
            targets: [<span class="string">"Blog"</span>]
        )
    ],
    dependencies: [
        .<span class="call">package</span>(name: <span class="string">"Publish"</span>, url: <span class="string">"https://github.com/johnsundell/publish.git"</span>, from: <span class="string">"0.6.0"</span>),
        .<span class="call">package</span>(name: <span class="string">"SplashPublishPlugin"</span>, url: <span class="string">"https://github.com/johnsundell/splashpublishplugin"</span>, from: <span class="string">"0.1.0"</span>)
    ],
    targets: [
        .<span class="call">target</span>(
            name: <span class="string">"Blog"</span>,
            dependencies: [
                <span class="string">"Publish"</span>,
                <span class="string">"SplashPublishPlugin"</span>
            ]
        )
    ]
)
</code></pre><p>А чтобы подсветка начала применяться при генерации нужно подклбючить плагин в main.swift</p><pre><code><span class="keyword">try</span> <span class="type">Blog</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">foundation</span>)
</code></pre><p>я поменял на</p><pre><code><span class="keyword">try</span> <span class="type">Blog</span>().<span class="call">publish</span>(
    withTheme: .<span class="dotAccess">foundation</span>,
    plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
)
</code></pre><p>Не забываем добавить в <em>main.swift</em> импорт плагина <code></code><code>import SplashPublishPlugin</code><code></code></p><p>Если сгенерировать сайт сейчас мы увидим, что блоки с кодом будут выделяться, но не подсвечиваться, это связано с тем, что нужно добавить <a href="https://github.com/JohnSundell/Splash/blob/master/Examples/sundellsColors.css">CSS</a>, будем использовать тот, который по умолчанию используется автором плагина.</p><p>Но вот проблема - куда добавлять этот CSS? Если покопаться в исходниках, то станет видно, что все это решается на уровне темы. Тема у нас стандартная <em>foundation</em>, и она лежит в самом пакете <em>Publish</em> по пути <a href="https://github.com/JohnSundell/Publish/blob/master/Sources/Publish/API/Theme%2BFoundation.swift">Sources/Publish/API/Theme+Foundation.swift</a></p><p>Внутри своего проекта (Blog) в папке где лежит <em>main.swift</em> я создал подобный файл <em>Theme+Blog.swift</em> Так же внутри папки Resources я создал папку Blog и поместил туда файл styles.css Внутрь файла я поместил содержимое CSS от темы <a href="https://github.com/JohnSundell/Publish/blob/master/Resources/FoundationTheme/styles.css">Foundation</a> ну и CSS от <a href="https://github.com/JohnSundell/Splash/blob/master/Examples/sundellsColors.css">Splash</a> Да, лучше было бы разделить, а может вообще темы вынести в отдельный package, но не будем усложнять раньше времени.</p><p>Итого у меня в файле темы пришлось поменять на следующее</p><pre><code><span class="keyword">import</span> Plot
<span class="keyword">import</span> Publish

<span class="keyword">public extension</span> <span class="type">Theme</span> {
    <span class="keyword">static var</span> blog: <span class="type">Self</span> {
        <span class="type">Theme</span>(
            htmlFactory: <span class="type">BlogHTMLFactory</span>(),
            resourcePaths: [<span class="string">"resources/blog/styles.css"</span>]
        )
    }
}
</code></pre><p>Если бы мы добавили еще один css, нам потребовалось бы не только добавит его в resourcePaths, но так же добавлять в каждый head страниц, чего мне делать совершенно не хотелось в данный момент</p><pre><code>.<span class="call">head</span>(for: item, on: context.<span class="property">site</span>, stylesheetPaths: [<span class="string">"/styles.css"</span>, <span class="string">"/splash.css"</span>]),
</code></pre><p>Итого сейчас у меня в проекте файловая структура выглядит как то так:</p><img src="https://sparklone.github.io/blog/images/create-blog-using-swift-and-publish-and-deploy-to-github-pages/final-structure.png" width="400"/><h2><a name="deploy"></a> 3. Зальём свой новый блог на GitРub Pages</h2><p>Итак, воспользуемся встроенным инструментом Publish для заливки нашего блога. В <em>main.swift</em> добавим</p><pre><code>.<span class="call">deploy</span>(using: .<span class="call">gitHub</span>(<span class="string">"login/login.github.io"</span>, useSSH: <span class="keyword">false</span>))
</code></pre><p>итого у меня получилось</p><pre><code><span class="keyword">try</span> <span class="type">Blog</span>().<span class="call">publish</span>(
    withTheme: .<span class="dotAccess">blog</span>,
    deployedUsing: .<span class="call">gitHub</span>(<span class="string">"sarklone/sparklone.github.io"</span>, useSSH: <span class="keyword">false</span>),
    plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
)
</code></pre><p>Проверяем в последний раз, что все работает. Последний штрих - мне кажется, что нет смысла хранить в git нашего репозитория с темплейтами как строить сайт содержимое папки Output, для этого у нас будет отдельный репозиторий как раз таки <em>login.github.io</em> Если вы согласны - исключим эту папку из .gitignore, добавив туда строку <em>/Output</em> в конце Если все ок выполняем в консоли (из папки где мы выполняли publish new)</p><pre><code>git add .
git commit -m <span class="string">"post title or some description"</span>
git push origin
publish deploy
</code></pre><p>В течении пары минут GitHub Pages подхватит ваши изменения и все появится онлайн.</p><br/><p>Поздравляю! )</p>]]></content:encoded></item></channel></rss>
